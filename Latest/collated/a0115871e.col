//@author: a0115871e



	/**
	 * origin: C:\Users\Jasmine\Desktop\CS2103\main\Latest\UnitTest\ListFulTest.cpp
	 */

#include "Parser.cpp"
#include "Log.cpp"
#include "Date.cpp"
#include "Edit.cpp"
#include "FileLocation.cpp"
#include "Search.cpp"
#include "Sort.cpp"
#include "Timing.cpp"
//#include "UserInterface.cpp"
#include "UserMessage.cpp"
#include "Priority.cpp"
#include "DataStore.cpp"
#include "Delete.cpp"
#include "Clear.cpp"
#include "Add.cpp"
#include "Classes.cpp"
#include "Category.cpp"
#include "ParserFacade.cpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace ListFulTest {		
	// End of segment: C:\Users\Jasmine\Desktop\CS2103\main\Latest\UnitTest\ListFulTest.cpp





	/**
	 * origin: C:\Users\Jasmine\Desktop\CS2103\main\Latest\UnitTest\ListFulTest.cpp
	 */

	TEST_CLASS(ListFulSortTest) {
	public:
		//Test for sorting by subject
		//According to floating, scheduled, deadline tasks
		TEST_METHOD(SortSubjectTest) {
			DataStore data;
			ParserFacade parseF;

			std::ostringstream errMsg;
			std::ostringstream floating;
			std::ostringstream scheduled;
			std::ostringstream deadline;

			bool pastDate = false;
			bool checkTime = false;
			bool isTemp = false;
			bool isDelete = false;

			int actualOutputInt = 0;
			int actualOutputInt2 = 0;
			int actualOutputInt3 = 0;
			int actualOutputInt4 = 0;
			int actualOutputInt5 = 0;
			int actualOutputInt6 = 0;
			int actualOutputInt7 = 0;
			int actualOutputInt8 = 0;
			int actualOutputInt9 = 0;
			int actualOutputInt10 = 0;
			
			std::string buffer = "buffer";
			std::string input1 = "add b";
			std::string input2 = "add a";
			std::string input3 = "add c";

			std::string input4 = "add c 5 may";
			std::string input5 = "add a 5/5/2015";
			std::string input6 = "add b may 5";
			
			std::string input7 = "add a 5 pm to 6pm 6aug";
			std::string input8 = "add c 6th August 2015 5:00-6:00";
			std::string input9 = "add b 6/8/15 from 5 to 6";
			
			parseF.init(input1);
			actualOutputInt = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input2);
			actualOutputInt2 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input3);
			actualOutputInt3 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input4);
			actualOutputInt4 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input5);
			actualOutputInt5 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input6);
			actualOutputInt6 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input7);
			actualOutputInt7 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input8);
			actualOutputInt8 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input9);
			actualOutputInt9 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			
			parseF.init("sort sub");
			actualOutputInt10 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			
			int extectedOutputInt = 0;
			int extectedOutputInt2 = 4;

			std::string expectedSubject1 = "a";
			std::string expectedSubject2 = "b";
			std::string expectedSubject3 = "c";

			std::string actualSubject1 = data.getData()[0].subject;
			std::string actualSubject2 = data.getData()[1].subject;
			std::string actualSubject3 = data.getData()[2].subject;
			std::string actualSubject4 = data.getData()[3].subject;
			std::string actualSubject5 = data.getData()[4].subject;
			std::string actualSubject6 = data.getData()[5].subject;
			std::string actualSubject7 = data.getData()[6].subject;
			std::string actualSubject8 = data.getData()[7].subject;
			std::string actualSubject9 = data.getData()[8].subject;

			Assert::AreEqual(extectedOutputInt, actualOutputInt);
			Assert::AreEqual(extectedOutputInt, actualOutputInt2);
			Assert::AreEqual(extectedOutputInt, actualOutputInt3);
			Assert::AreEqual(extectedOutputInt, actualOutputInt4);
			Assert::AreEqual(extectedOutputInt, actualOutputInt5);
			Assert::AreEqual(extectedOutputInt, actualOutputInt6);
			Assert::AreEqual(extectedOutputInt, actualOutputInt7);
			Assert::AreEqual(extectedOutputInt, actualOutputInt8);
			Assert::AreEqual(extectedOutputInt, actualOutputInt9);

			Assert::AreEqual(extectedOutputInt2, actualOutputInt10);
	
			Assert::AreEqual(expectedSubject1, actualSubject1);
			Assert::AreEqual(expectedSubject2, actualSubject2);
			Assert::AreEqual(expectedSubject3, actualSubject3);
			Assert::AreEqual(expectedSubject1, actualSubject4);
			Assert::AreEqual(expectedSubject2, actualSubject5);
			Assert::AreEqual(expectedSubject3, actualSubject6);
			Assert::AreEqual(expectedSubject1, actualSubject7);
			Assert::AreEqual(expectedSubject2, actualSubject8);
			Assert::AreEqual(expectedSubject3, actualSubject9);

			//Test for dataStore functionality
			int ExpectedDataBaseSize = 9;
			int actualDataBaseSize = data.getData().size();
			Assert::AreEqual(ExpectedDataBaseSize, actualDataBaseSize);
		}

		//Test for sorting by category
		//According to floating, scheduled, deadline tasks
		TEST_METHOD(SortCategoryTest) {
			DataStore data;
			ParserFacade parseF;

			std::ostringstream errMsg;
			std::ostringstream floating;
			std::ostringstream scheduled;
			std::ostringstream deadline;

			bool pastDate = false;
			bool checkTime = false;
			bool isTemp = false;
			bool isDelete = false;

			int actualOutputInt = 0;
			int actualOutputInt2 = 0;
			int actualOutputInt3 = 0;
			int actualOutputInt4 = 0;
			int actualOutputInt5 = 0;
			int actualOutputInt6 = 0;
			int actualOutputInt7 = 0;
			int actualOutputInt8 = 0;
			int actualOutputInt9 = 0;
			int actualOutputInt10 = 0;
			int actualOutputInt11 = 0;
			int actualOutputInt12 = 0;
			int actualOutputInt13 = 0;
			
			std::string buffer = "buffer";
			std::string input1 = "add b GENERAL";
			std::string input2 = "add a WORK";
			std::string input3 = "add c PERSONAL";
			std::string input4 = "add d ERRAND";

			std::string input5 = "add c ERRAND 5 may";
			std::string input6 = "add a WORK 5/5/2015";
			std::string input7 = "add b GENERAL may 5";
			std::string input8 = "add b PERSONAL may 5";
			
			std::string input9 = "add a PERSONAL 5 pm to 6pm 6aug";
			std::string input10 = "add c ERRAND 6th August 2015 5:00-6:00";
			std::string input11 = "add b GENERAL 6/8/15 from 5 to 6";
			std::string input12 = "add b WORK 6/8/15 from 5 to 6";
			
			parseF.init(input1);
			actualOutputInt = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input2);
			actualOutputInt2 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input3);
			actualOutputInt3 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input4);
			actualOutputInt4 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input5);
			actualOutputInt5 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input6);
			actualOutputInt6 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input7);
			actualOutputInt7 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input8);
			actualOutputInt8 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input9);
			actualOutputInt9 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input10);
			actualOutputInt10 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input11);
			actualOutputInt11 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input12);
			actualOutputInt12 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init("sort cat");
			actualOutputInt13 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			
			int extectedOutputInt = 0;
			int extectedOutputInt2 = 4;

			std::string expectedCategory1 = "WORK    ";
			std::string expectedCategory2 = "PERSONAL";
			std::string expectedCategory3 = "ERRAND  ";
			std::string expectedCategory4 = "GENERAL ";

			std::string actualCategory1 = data.getData()[0].category;
			std::string actualCategory2 = data.getData()[1].category;
			std::string actualCategory3 = data.getData()[2].category;
			std::string actualCategory4 = data.getData()[3].category;
			std::string actualCategory5 = data.getData()[4].category;
			std::string actualCategory6 = data.getData()[5].category;
			std::string actualCategory7 = data.getData()[6].category;
			std::string actualCategory8 = data.getData()[7].category;
			std::string actualCategory9 = data.getData()[8].category;
			std::string actualCategory10 = data.getData()[9].category;
			std::string actualCategory11 = data.getData()[10].category;
			std::string actualCategory12 = data.getData()[11].category;

			Assert::AreEqual(extectedOutputInt, actualOutputInt);
			Assert::AreEqual(extectedOutputInt, actualOutputInt2);
			Assert::AreEqual(extectedOutputInt, actualOutputInt3);
			Assert::AreEqual(extectedOutputInt, actualOutputInt4);
			Assert::AreEqual(extectedOutputInt, actualOutputInt5);
			Assert::AreEqual(extectedOutputInt, actualOutputInt6);
			Assert::AreEqual(extectedOutputInt, actualOutputInt7);
			Assert::AreEqual(extectedOutputInt, actualOutputInt8);
			Assert::AreEqual(extectedOutputInt, actualOutputInt9);
			Assert::AreEqual(extectedOutputInt, actualOutputInt10);
			Assert::AreEqual(extectedOutputInt, actualOutputInt11);
			Assert::AreEqual(extectedOutputInt, actualOutputInt12);

			Assert::AreEqual(extectedOutputInt2, actualOutputInt13);
	
			Assert::AreEqual(expectedCategory1, actualCategory1);
			Assert::AreEqual(expectedCategory2, actualCategory2);
			Assert::AreEqual(expectedCategory3, actualCategory3);
			Assert::AreEqual(expectedCategory4, actualCategory4);
			Assert::AreEqual(expectedCategory1, actualCategory5);
			Assert::AreEqual(expectedCategory2, actualCategory6);
			Assert::AreEqual(expectedCategory3, actualCategory7);
			Assert::AreEqual(expectedCategory4, actualCategory8);
			Assert::AreEqual(expectedCategory1, actualCategory9);
			Assert::AreEqual(expectedCategory2, actualCategory10);
			Assert::AreEqual(expectedCategory3, actualCategory11);
			Assert::AreEqual(expectedCategory4, actualCategory12);

			//Test for dataStore functionality
			int ExpectedDataBaseSize = 12;
			int actualDataBaseSize = data.getData().size();
			Assert::AreEqual(ExpectedDataBaseSize, actualDataBaseSize);
		}

		//Test for sorting by priority
		//According to floating, scheduled, deadline tasks
		TEST_METHOD(SortPriorityTest) {
			DataStore data;
			ParserFacade parseF;

			std::ostringstream errMsg;
			std::ostringstream floating;
			std::ostringstream scheduled;
			std::ostringstream deadline;

			bool pastDate = false;
			bool checkTime = false;
			bool isTemp = false;
			bool isDelete = false;

			int actualOutputInt = 0;
			int actualOutputInt2 = 0;
			int actualOutputInt3 = 0;
			int actualOutputInt4 = 0;
			int actualOutputInt5 = 0;
			int actualOutputInt6 = 0;
			int actualOutputInt7 = 0;
			int actualOutputInt8 = 0;
			int actualOutputInt9 = 0;
			int actualOutputInt10 = 0;
			
			std::string buffer = "buffer";
			std::string input1 = "add b MED";
			std::string input2 = "add a LOW";
			std::string input3 = "add c HIGH";

			std::string input4 = "add c HIGH 5 may";
			std::string input5 = "add a MED 5/5/2015";
			std::string input6 = "add b LOW may 5";
			
			std::string input7 = "add a LOW 5 pm to 6pm 6aug";
			std::string input8 = "add c HIGH 6th August 2015 5:00-6:00";
			std::string input9 = "add b MED 6/8/15 from 5 to 6";
			
			parseF.init(input1);
			actualOutputInt = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input2);
			actualOutputInt2 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input3);
			actualOutputInt3 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input4);
			actualOutputInt4 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input5);
			actualOutputInt5 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input6);
			actualOutputInt6 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input7);
			actualOutputInt7 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input8);
			actualOutputInt8 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			parseF.init(input9);
			actualOutputInt9 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init("sort priority");
			actualOutputInt10 = parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
				
			int extectedOutputInt = 0;
			int extectedOutputInt2 = 4;

			std::string expectedPriority1 = "HIGH";
			std::string expectedPriority2 = "MED ";
			std::string expectedPriority3 = "LOW ";

			std::string actualPriority1 = data.getData()[0].priority;
			std::string actualPriority2 = data.getData()[1].priority;
			std::string actualPriority3 = data.getData()[2].priority;
			std::string actualPriority4 = data.getData()[3].priority;
			std::string actualPriority5 = data.getData()[4].priority;
			std::string actualPriority6 = data.getData()[5].priority;
			std::string actualPriority7 = data.getData()[6].priority;
			std::string actualPriority8 = data.getData()[7].priority;
			std::string actualPriority9 = data.getData()[8].priority;

			Assert::AreEqual(extectedOutputInt, actualOutputInt);
			Assert::AreEqual(extectedOutputInt, actualOutputInt2);
			Assert::AreEqual(extectedOutputInt, actualOutputInt3);
			Assert::AreEqual(extectedOutputInt, actualOutputInt4);
			Assert::AreEqual(extectedOutputInt, actualOutputInt5);
			Assert::AreEqual(extectedOutputInt, actualOutputInt6);
			Assert::AreEqual(extectedOutputInt, actualOutputInt7);
			Assert::AreEqual(extectedOutputInt, actualOutputInt8);
			Assert::AreEqual(extectedOutputInt, actualOutputInt9);

			Assert::AreEqual(extectedOutputInt2, actualOutputInt10);
	
			Assert::AreEqual(expectedPriority1, actualPriority1);
			Assert::AreEqual(expectedPriority2, actualPriority2);
			Assert::AreEqual(expectedPriority3, actualPriority3);
			Assert::AreEqual(expectedPriority1, actualPriority4);
			Assert::AreEqual(expectedPriority2, actualPriority5);
			Assert::AreEqual(expectedPriority3, actualPriority6);
			Assert::AreEqual(expectedPriority1, actualPriority7);
			Assert::AreEqual(expectedPriority2, actualPriority8);
			Assert::AreEqual(expectedPriority3, actualPriority9);

			//Test for dataStore functionality
			int ExpectedDataBaseSize = 9;
			int actualDataBaseSize = data.getData().size();
			Assert::AreEqual(ExpectedDataBaseSize, actualDataBaseSize);
		}
		
	};
	
	// End of segment: C:\Users\Jasmine\Desktop\CS2103\main\Latest\UnitTest\ListFulTest.cpp





	/**
	 * origin: C:\Users\Jasmine\Desktop\CS2103\main\Latest\UnitTest\ListFulTest.cpp
	 */

	TEST_CLASS(ListFulRemainingTest) {
	public:
	
		TEST_METHOD(ClearTest)
		{
			// TODO: Your test code here
			DataStore data;
			ParserFacade parseF;

			std::ostringstream errMsg;
			std::ostringstream floating;
			std::ostringstream scheduled;
			std::ostringstream deadline;

			bool pastDate = false;
			bool checkTime = false;
			bool isTemp = false;
			bool isDelete = false;

			std::string buffer = "buffer";
			std::string input1 = "add 2000-2359 FUNRUN";
			std::string input2 = "add doctor appointment may 10th PERSONAL MED";
			std::string input3 = "add runNUS 24 aug 8.30am to 10am MED PERSONAL";
			std::string input4 = "clear";

			parseF.init(input1);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init(input2);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init(input3);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init(input4);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			Assert::IsTrue(data.getData().empty());
		}

		TEST_METHOD(UndoTest)
		{
			// TODO: Your test code here
			DataStore data;
			ParserFacade parseF;

			std::ostringstream errMsg;
			std::ostringstream floating;
			std::ostringstream scheduled;
			std::ostringstream deadline;

			bool pastDate = false;
			bool checkTime = false;
			bool isTemp = false;
			bool isDelete = false;

			std::string buffer = "buffer";
			std::string input1 = "add CS project meeting 6 apr 2015 1200-1600 MED";
			std::string input2 = "add visit grandma 5th april 1200-1600 LOW";
			std::string input3 = "add FUNRUN  7th apr 1200-1600";
			std::string input4 = "undo";

			parseF.init(input1);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init(input2);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init(input3);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init(input4);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			
			int actualSize = data.getData().size();
			int expectedSize = 2;

			Assert::AreEqual(expectedSize, actualSize);
		}

		TEST_METHOD(RedoTest)
		{
			// TODO: Your test code here
			DataStore data;
			ParserFacade parseF;

			std::ostringstream errMsg;
			std::ostringstream floating;
			std::ostringstream scheduled;
			std::ostringstream deadline;

			bool pastDate = false;
			bool checkTime = false;
			bool isTemp = false;
			bool isDelete = false;

			std::string buffer = "buffer";
			std::string input1 = "add CS project meeting 6 apr 2015 1200-1600 MED";
			std::string input2 = "add visit grandma 5th april 1200-1600 LOW";
			std::string input3 = "add FUNRUN  7th apr 1300-1700";
			std::string input4 = "undo";
			std::string input5 = "redo";

			parseF.init(input1);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init(input2);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init(input3);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			parseF.init(input4);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);
			
			parseF.init(input5);
			parseF.carryOutCommand(data, errMsg, floating, scheduled, deadline);
			data.getUndoActionLog().push_back(buffer);

			int actualSize = data.getData().size();
			int expectedSize = 3;

			Assert::AreEqual(expectedSize, actualSize);

			int expectedStartTime = 1300;
			int actualStartTime = data.getData()[2].startTime;
			int expectedEndTime = 1700;
			int actualEndTime = data.getData()[2].endTime;

			Assert::AreEqual(expectedStartTime, actualStartTime);
			Assert::AreEqual(expectedEndTime, actualEndTime);		
		}
	};
}
	// End of segment: C:\Users\Jasmine\Desktop\CS2103\main\Latest\UnitTest\ListFulTest.cpp





